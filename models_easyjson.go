// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyper

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo(in *jlexer.Lexer, out *kasadaPayloadOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "headers":
			(out.Headers).UnmarshalEasyJSON(in)
		case "payload":
			out.Payload = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo(out *jwriter.Writer, in kasadaPayloadOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix[1:])
		(in.Headers).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v kasadaPayloadOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v kasadaPayloadOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *kasadaPayloadOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *kasadaPayloadOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo1(in *jlexer.Lexer, out *apiResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payload":
			out.Payload = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				if out.Headers == nil {
					out.Headers = new(Headers)
				}
				(*out.Headers).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo1(out *jwriter.Writer, in apiResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix[1:])
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil {
			out.RawString("null")
		} else {
			(*in.Headers).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo1(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo2(in *jlexer.Lexer, out *UtmvcInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "sessionIds":
			if in.IsNull() {
				in.Skip()
				out.SessionIds = nil
			} else {
				in.Delim('[')
				if out.SessionIds == nil {
					if !in.IsDelim(']') {
						out.SessionIds = make([]string, 0, 4)
					} else {
						out.SessionIds = []string{}
					}
				} else {
					out.SessionIds = (out.SessionIds)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.SessionIds = append(out.SessionIds, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo2(out *jwriter.Writer, in UtmvcInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"sessionIds\":"
		out.RawString(prefix)
		if in.SessionIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.SessionIds {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"script\":"
		out.RawString(prefix)
		out.String(string(in.Script))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UtmvcInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UtmvcInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UtmvcInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UtmvcInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo2(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo3(in *jlexer.Lexer, out *SensorInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "abck":
			out.Abck = string(in.String())
		case "bmsz":
			out.Bmsz = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "pageUrl":
			out.PageUrl = string(in.String())
		case "userAgent":
			out.UserAgent = string(in.String())
		case "scriptHash":
			out.ScriptHash = string(in.String())
		case "dynamicValues":
			out.DynamicValues = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo3(out *jwriter.Writer, in SensorInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"abck\":"
		out.RawString(prefix[1:])
		out.String(string(in.Abck))
	}
	{
		const prefix string = ",\"bmsz\":"
		out.RawString(prefix)
		out.String(string(in.Bmsz))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"pageUrl\":"
		out.RawString(prefix)
		out.String(string(in.PageUrl))
	}
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"scriptHash\":"
		out.RawString(prefix)
		out.String(string(in.ScriptHash))
	}
	{
		const prefix string = ",\"dynamicValues\":"
		out.RawString(prefix)
		out.String(string(in.DynamicValues))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SensorInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SensorInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SensorInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SensorInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo3(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo4(in *jlexer.Lexer, out *SbsdInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "uuid":
			out.Uuid = string(in.String())
		case "pageUrl":
			out.PageUrl = string(in.String())
		case "o":
			out.OCookie = string(in.String())
		case "script":
			out.Script = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo4(out *jwriter.Writer, in SbsdInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"pageUrl\":"
		out.RawString(prefix)
		out.String(string(in.PageUrl))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OCookie))
	}
	{
		const prefix string = ",\"script\":"
		out.RawString(prefix)
		out.String(string(in.Script))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SbsdInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SbsdInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SbsdInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SbsdInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo4(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo5(in *jlexer.Lexer, out *ReeseInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "scriptUrl":
			out.ScriptUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo5(out *jwriter.Writer, in ReeseInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"scriptUrl\":"
		out.RawString(prefix)
		out.String(string(in.ScriptUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReeseInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReeseInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReeseInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReeseInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo5(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo6(in *jlexer.Lexer, out *PixelInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "htmlVar":
			out.HTMLVar = string(in.String())
		case "scriptVar":
			out.ScriptVar = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo6(out *jwriter.Writer, in PixelInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"htmlVar\":"
		out.RawString(prefix)
		out.String(string(in.HTMLVar))
	}
	{
		const prefix string = ",\"scriptVar\":"
		out.RawString(prefix)
		out.String(string(in.ScriptVar))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PixelInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PixelInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PixelInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PixelInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo6(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo7(in *jlexer.Lexer, out *KasadaPowInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "st":
			out.St = int(in.Int())
		case "workTime":
			if in.IsNull() {
				in.Skip()
				out.WorkTime = nil
			} else {
				if out.WorkTime == nil {
					out.WorkTime = new(int)
				}
				*out.WorkTime = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo7(out *jwriter.Writer, in KasadaPowInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"st\":"
		out.RawString(prefix[1:])
		out.Int(int(in.St))
	}
	if in.WorkTime != nil {
		const prefix string = ",\"workTime\":"
		out.RawString(prefix)
		out.Int(int(*in.WorkTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KasadaPowInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KasadaPowInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KasadaPowInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KasadaPowInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo7(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo8(in *jlexer.Lexer, out *KasadaPayloadInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "ipsLink":
			out.IpsLink = string(in.String())
		case "script":
			out.Script = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo8(out *jwriter.Writer, in KasadaPayloadInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"ipsLink\":"
		out.RawString(prefix)
		out.String(string(in.IpsLink))
	}
	{
		const prefix string = ",\"script\":"
		out.RawString(prefix)
		out.String(string(in.Script))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KasadaPayloadInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KasadaPayloadInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KasadaPayloadInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KasadaPayloadInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo8(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo9(in *jlexer.Lexer, out *KasadaHeaders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x-kpsdk-ct":
			out.XKpsdkCt = string(in.String())
		case "x-kpsdk-dt":
			out.XKpsdkDt = string(in.String())
		case "x-kpsdk-v":
			out.XKpsdkV = string(in.String())
		case "x-kpsdk-r":
			out.XKpsdkR = string(in.String())
		case "x-kpsdk-dv":
			out.XKpsdkDv = string(in.String())
		case "x-kpsdk-h":
			out.XKpsdkH = string(in.String())
		case "x-kpsdk-fc":
			out.XKpsdkFc = string(in.String())
		case "x-kpsdk-im":
			out.XKpsdkIm = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo9(out *jwriter.Writer, in KasadaHeaders) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x-kpsdk-ct\":"
		out.RawString(prefix[1:])
		out.String(string(in.XKpsdkCt))
	}
	{
		const prefix string = ",\"x-kpsdk-dt\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkDt))
	}
	{
		const prefix string = ",\"x-kpsdk-v\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkV))
	}
	{
		const prefix string = ",\"x-kpsdk-r\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkR))
	}
	{
		const prefix string = ",\"x-kpsdk-dv\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkDv))
	}
	{
		const prefix string = ",\"x-kpsdk-h\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkH))
	}
	{
		const prefix string = ",\"x-kpsdk-fc\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkFc))
	}
	{
		const prefix string = ",\"x-kpsdk-im\":"
		out.RawString(prefix)
		out.String(string(in.XKpsdkIm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KasadaHeaders) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KasadaHeaders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KasadaHeaders) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KasadaHeaders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo9(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo10(in *jlexer.Lexer, out *Headers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sec-ch-device-memory":
			out.DeviceMemory = string(in.String())
		case "sec-ch-ua-mobile":
			out.Mobile = string(in.String())
		case "sec-ch-ua-arch":
			out.Arch = string(in.String())
		case "sec-ch-ua-platform":
			out.Platform = string(in.String())
		case "sec-ch-ua-model":
			out.Model = string(in.String())
		case "sec-ch-ua-full-version-list":
			out.FullVersionList = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo10(out *jwriter.Writer, in Headers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sec-ch-device-memory\":"
		out.RawString(prefix[1:])
		out.String(string(in.DeviceMemory))
	}
	{
		const prefix string = ",\"sec-ch-ua-mobile\":"
		out.RawString(prefix)
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"sec-ch-ua-arch\":"
		out.RawString(prefix)
		out.String(string(in.Arch))
	}
	{
		const prefix string = ",\"sec-ch-ua-platform\":"
		out.RawString(prefix)
		out.String(string(in.Platform))
	}
	{
		const prefix string = ",\"sec-ch-ua-model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"sec-ch-ua-full-version-list\":"
		out.RawString(prefix)
		out.String(string(in.FullVersionList))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Headers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Headers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Headers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Headers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo10(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo11(in *jlexer.Lexer, out *DynamicInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo11(out *jwriter.Writer, in DynamicInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"script\":"
		out.RawString(prefix[1:])
		out.String(string(in.Script))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DynamicInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DynamicInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DynamicInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DynamicInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo11(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo12(in *jlexer.Lexer, out *DataDomeTagsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "cid":
			out.Cid = string(in.String())
		case "ddk":
			out.Ddk = string(in.String())
		case "referer":
			out.Referer = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo12(out *jwriter.Writer, in DataDomeTagsInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.Cid))
	}
	{
		const prefix string = ",\"ddk\":"
		out.RawString(prefix)
		out.String(string(in.Ddk))
	}
	{
		const prefix string = ",\"referer\":"
		out.RawString(prefix)
		out.String(string(in.Referer))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataDomeTagsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataDomeTagsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataDomeTagsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataDomeTagsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo12(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo13(in *jlexer.Lexer, out *DataDomeSliderInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "deviceLink":
			out.DeviceLink = string(in.String())
		case "html":
			out.Html = string(in.String())
		case "puzzle":
			out.Puzzle = string(in.String())
		case "piece":
			out.Piece = string(in.String())
		case "parentUrl":
			out.ParentUrl = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo13(out *jwriter.Writer, in DataDomeSliderInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"deviceLink\":"
		out.RawString(prefix)
		out.String(string(in.DeviceLink))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.Html))
	}
	{
		const prefix string = ",\"puzzle\":"
		out.RawString(prefix)
		out.String(string(in.Puzzle))
	}
	{
		const prefix string = ",\"piece\":"
		out.RawString(prefix)
		out.String(string(in.Piece))
	}
	{
		const prefix string = ",\"parentUrl\":"
		out.RawString(prefix)
		out.String(string(in.ParentUrl))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataDomeSliderInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataDomeSliderInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataDomeSliderInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataDomeSliderInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo13(l, v)
}
func easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo14(in *jlexer.Lexer, out *DataDomeInterstitialInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userAgent":
			out.UserAgent = string(in.String())
		case "deviceLink":
			out.DeviceLink = string(in.String())
		case "html":
			out.Html = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo14(out *jwriter.Writer, in DataDomeInterstitialInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"deviceLink\":"
		out.RawString(prefix)
		out.String(string(in.DeviceLink))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.Html))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataDomeInterstitialInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataDomeInterstitialInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComHyperSolutionsHyperSdkGo14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataDomeInterstitialInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataDomeInterstitialInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComHyperSolutionsHyperSdkGo14(l, v)
}
